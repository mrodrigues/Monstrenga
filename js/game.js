// Generated by CoffeeScript 1.3.3

window.addEventListener("load", function() {
  var Q;
  Q = window.Q = Quintus({
    audioSupported: ['wav', 'mp3', 'ogg']
  }).include("Audio, Sprites, Scenes, Input, 2D, Anim, Touch, UI").setup({
    maximize: true
  }).controls().touch().enableSound();
  Q.component("fearOfHeight", {
    added: function() {
      return this.entity.on("step", this, "step");
    },
    step: function(dt) {
      var x_offset, y_offset;
      y_offset = 20;
      x_offset = 10;
      x_offset *= (function() {
        switch (this.entity.direction()) {
          case "left":
            return -1;
          case "right":
            return 1;
        }
      }).call(this);
      if (!Q.stage().locate(this.entity.p.x + x_offset, this.entity.p.y + y_offset, Q.SPRITE_ALL)) {
        return this.entity.p.vx *= -1;
      }
    }
  });
  Q.component("flippable", {
    added: function() {
      return this.entity.on("step", this, "step");
    },
    step: function(dt) {
      if (this.entity.p.vx > 0) {
        return this.entity.play("walk_right");
      } else if (this.entity.p.vx < 0) {
        return this.entity.play("walk_left");
      }
    }
  });
  Q.Sprite.extend("Player", {
    init: function(p) {
      this._super(p, {
        sheet: "player",
        sprite: "player",
        x: 410,
        y: 90,
        life: 1,
        jumpSpeed: -560,
        gravity: 1.5,
        points: [[-11, 15], [-11, -15], [12, -15], [12, 15]]
      });
      this.add("2d, platformerControls, animation, flippable");
      return this.on("jump");
    },
    step: function(dt) {
      if (this.p.landed > 0) {
        this.p.playedJump = false;
      }
      if (Q.debug) {
        return Q.stageScene('hud', 3, this.p);
      }
    },
    draw: function(ctx) {
      this._super(ctx);
      if (Q.debug) {
        ctx.fillStyle = "red";
        return ctx.fillRect(-20, 20, 5, 5);
      }
    },
    die: function() {
      if (!Q.debug) {
        Q.audio.play('die.mp3');
        Q.clearStages();
        return Q.stageScene("level1");
      }
    },
    jump: function() {
      if (!this.p.playedJump) {
        Q.audio.play('jump.mp3');
        return this.p.playedJump = true;
      }
    },
    jumped: function(obj) {
      return obj.p.playedJump = false;
    },
    updateHud: function() {
      return Q.stageScene('hud', 3, this.p);
    },
    loseLife: function() {
      if (this.p.life === 0) {
        return this.die();
      } else {
        this.p.life -= 1;
        return this.updateHud();
      }
    }
  });
  Q.Sprite.extend("Range", {
    init: function(p) {
      this._super(p, {
        type: Q.SPRITE_NONE
      });
      return this.owner = this.p.owner;
    },
    step: function(dt) {
      this.p.x = this.owner.p.x + this.p.w / 2;
      if (this.owner.direction() === "left") {
        this.p.x -= this.p.w;
      }
      return this.p.y = this.owner.p.y - this.owner.p.h / 2;
    }
  });
  Q.Sprite.extend("Enemy", {
    WALKING: 0,
    DEAD: 1,
    PANIC: 2,
    init: function(p) {
      this._super(p, {
        sheet: "human",
        sprite: "human",
        vx: 100,
        runningFactor: 2
      });
      this.state = this.WALKING;
      this.range = new Q.Range({
        w: 400,
        h: 20,
        owner: this
      });
      this.add("2d, aiBounce, fearOfHeight, animation, flippable");
      return this.rangeAddedToStage = false;
    },
    direction: function() {
      if (this.p.vx < 0) {
        return "left";
      } else {
        return "right";
      }
    },
    draw: function(ctx) {
      return this._super(ctx);
    },
    step: function(dt) {
      if (!this.rangeAddedToStage) {
        this.stage.insert(this.range);
        this.rangeAddedToStage = true;
      }
      switch (this.state) {
        case this.WALKING:
          if (Q.overlap(this.range, Q.player)) {
            return this.panic();
          }
          break;
        case this.DEAD:
          this.p.vx = 0;
          return this.p.angle = 90;
      }
    },
    panic: function() {
      Q.audio.play('scream.mp3');
      this.state = this.PANIC;
      this.p.vx *= -this.p.runningFactor;
      return this.del("fearOfHeight");
    },
    die: function() {
      Q.audio.play('die.mp3');
      Q.player.loseLife();
      return this.destroy();
    }
  });
  Q.Sprite.extend("Trap", {
    init: function(p) {
      this._super(p, {
        asset: "trap.png",
        points: [[-16, 16], [-9, -2], [9, -2], [16, 16]]
      });
      return this.on("hit.sprite", function(collision) {
        return collision.obj.die();
      });
    }
  });
  Q.Sprite.extend("Door", {
    init: function(p) {
      this._super(p, {
        asset: "door.png"
      });
      return this.on("hit.sprite", function(collision) {
        if (collision.obj.isA("Player")) {
          return Q.stageScene("endGame", 1, {
            label: "You won!"
          });
        }
      });
    }
  });
  Q.scene("hud", function(stage) {
    var container;
    container = stage.insert(new Q.UI.Container({
      x: 50,
      y: 0
    }));
    container.insert(new Q.UI.Text({
      x: 600,
      y: 20,
      label: "Life: " + Q.player.p.life,
      color: "black"
    }));
    if (Q.debug) {
      container.insert(new Q.UI.Text({
        x: 200,
        y: 20,
        label: "x: " + Q.player.p.x + ", y: " + Q.player.p.y,
        color: "red"
      }));
    }
    return container.fit(20);
  });
  Q.scene("level1", function(stage) {
    stage.insert(new Q.Repeater({
      asset: "background-wall.png",
      speedX: 0.5,
      speedY: 0.5
    }));
    stage.collisionLayer(new Q.TileLayer({
      dataAsset: "level.json",
      sheet: "tiles"
    }));
    Q.player = stage.insert(new Q.Player({
      x: 74,
      y: 1521
    }));
    stage.add("viewport").follow(Q.player);
    window.enemy1 = new Q.Enemy({
      x: 190,
      y: 1361
    });
    stage.insert(enemy1);
    stage.insert(new Q.Enemy({
      x: 240,
      y: 1073
    }));
    stage.insert(new Q.Enemy({
      x: 300,
      y: 625
    }));
    stage.insert(new Q.Enemy({
      x: 100,
      y: 337
    }));
    window.trap1 = new Q.Trap({
      x: 175,
      y: 689
    });
    stage.insert(trap1);
    stage.insert(new Q.Trap({
      x: 209,
      y: 689
    }));
    stage.insert(new Q.Trap({
      x: 399,
      y: 689
    }));
    stage.insert(new Q.Trap({
      x: 433,
      y: 689
    }));
    stage.insert(new Q.Trap({
      x: 209,
      y: 1041
    }));
    stage.insert(new Q.Trap({
      x: 241,
      y: 1041
    }));
    stage.insert(new Q.Trap({
      x: 399,
      y: 1201
    }));
    stage.insert(new Q.Trap({
      x: 431,
      y: 1201
    }));
    stage.insert(new Q.Trap({
      x: 431,
      y: 1201
    }));
    stage.insert(new Q.Trap({
      x: 175,
      y: 401
    }));
    stage.insert(new Q.Trap({
      x: 206,
      y: 401
    }));
    stage.insert(new Q.Trap({
      x: 237,
      y: 401
    }));
    stage.insert(new Q.Trap({
      x: 271,
      y: 401
    }));
    window.door = stage.insert(new Q.Door({
      x: 401,
      y: 96
    }));
    return Q.stageScene('hud', 3, Q.player.p);
  });
  Q.scene("endGame", function(stage) {
    var button, container, label;
    container = stage.insert(new Q.UI.Container({
      x: Q.width / 2,
      y: Q.height / 2,
      fill: "rgba(0,0,0,0.5)"
    }));
    button = container.insert(new Q.UI.Button({
      x: 0,
      y: 0,
      fill: "#CCCCCC",
      label: "Play Again"
    }));
    label = container.insert(new Q.UI.Text({
      x: 10,
      y: -10 - button.p.h,
      label: stage.options.label
    }));
    button.on("click", function() {
      Q.clearStages();
      Q.stageScene("level1");
    });
    container.fit(20);
  });
  return Q.load("player.png, player.json, human.png, human.json, trap.png, door.png, level.json, tiles.png, background-wall.png, jump.mp3, scream.mp3, die.mp3, bg.mp3", function() {
    Q.sheet("tiles", "tiles.png", {
      tilew: 32,
      tileh: 32
    });
    Q.compileSheets("player.png", "player.json");
    Q.compileSheets("human.png", "human.json");
    Q.animations("player", {
      walk_right: {
        frames: [0],
        rate: 1 / 15,
        flip: false,
        loop: true
      },
      walk_left: {
        frames: [0],
        rate: 1 / 15,
        flip: "x",
        loop: true
      }
    });
    Q.animations("human", {
      walk_right: {
        frames: [0],
        rate: 1 / 15,
        flip: false,
        loop: true
      },
      walk_left: {
        frames: [0],
        rate: 1 / 15,
        flip: "x",
        loop: true
      }
    });
    Q.stageScene("level1");
    return Q.audio.play("bg.mp3", {
      loop: true
    });
  }, {
    progressCallback: function(loaded, total) {
      var element;
      element = document.getElementById("loading_progress");
      element.style.width = Math.floor(loaded / total * 100) + "%";
      if (loaded === total) {
        return document.getElementById("loading").style.display = "none";
      }
    }
  });
});
